{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, comment) => dispatch => {\n  const newComment = {\n    dish: dishId,\n    rating: rating,\n    comment: comment\n  };\n  console.log('Comment ', newComment);\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': bearer\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const feedbackFailed = errmess => ({\n  type: ActionTypes.FEEDBACK_FAILED,\n  payload: errmess\n});\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n});\nexport const postFeedback = feedback => dispatch => {\n  return fetch(baseUrl + 'feedbacks', {\n    method: \"POST\",\n    body: JSON.stringify(feedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addFeedback(response))).then(response => {\n    console.log('Feedback', response);\n    alert('Thank you for your feedback!\\n' + JSON.stringify(response));\n  }).catch(error => {\n    console.log('Feedback', error.message);\n    alert('Your feedback could not be posted\\nError: ' + error.message);\n  });\n};\nexport const requestLogin = creds => {\n  return {\n    type: ActionTypes.LOGIN_REQUEST,\n    creds\n  };\n};\nexport const receiveLogin = response => {\n  return {\n    type: ActionTypes.LOGIN_SUCCESS,\n    token: response.token\n  };\n};\nexport const loginError = message => {\n  return {\n    type: ActionTypes.LOGIN_FAILURE,\n    message\n  };\n};\nexport const loginUser = creds => dispatch => {\n  // We dispatch requestLogin to kickoff the call to the API\n  dispatch(requestLogin(creds));\n  return fetch(baseUrl + 'users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(creds)\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    if (response.success) {\n      // If login was successful, set the token in local storage\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('creds', JSON.stringify(creds)); // Dispatch the success action\n\n      dispatch(fetchFavorites());\n      dispatch(receiveLogin(response));\n    } else {\n      var error = new Error('Error ' + response.status);\n      error.response = response;\n      throw error;\n    }\n  }).catch(error => dispatch(loginError(error.message)));\n};\nexport const requestLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_REQUEST\n  };\n};\nexport const receiveLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_SUCCESS\n  };\n}; // Logs the user out\n\nexport const logoutUser = () => dispatch => {\n  dispatch(requestLogout());\n  localStorage.removeItem('token');\n  localStorage.removeItem('creds');\n  dispatch(favoritesFailed(\"Error 401: Unauthorized\"));\n  dispatch(receiveLogout());\n};\nexport const postFavorite = dishId => dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites/' + dishId, {\n    method: \"POST\",\n    body: JSON.stringify({\n      \"_id\": dishId\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(favorites => {\n    console.log('Favorite Added', favorites);\n    dispatch(addFavorites(favorites));\n  }).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const deleteFavorite = dishId => dispatch => {\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites/' + dishId, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': bearer\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(favorites => {\n    console.log('Favorite Deleted', favorites);\n    dispatch(addFavorites(favorites));\n  }).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const fetchFavorites = () => dispatch => {\n  dispatch(favoritesLoading(true));\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + 'favorites', {\n    headers: {\n      'Authorization': bearer\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(favorites => dispatch(addFavorites(favorites))).catch(error => dispatch(favoritesFailed(error.message)));\n};\nexport const favoritesLoading = () => ({\n  type: ActionTypes.FAVORITES_LOADING\n});\nexport const favoritesFailed = errmess => ({\n  type: ActionTypes.FAVORITES_FAILED,\n  payload: errmess\n});\nexport const addFavorites = favorites => ({\n  type: ActionTypes.ADD_FAVORITES,\n  payload: favorites\n});\nexport const addUser = newUser => ({\n  type: ActionTypes.ADD_USER,\n  payload: newUser\n});\nexport const registerUser = newUser => dispatch => {\n  return fetch(baseUrl + 'users/signup', {\n    method: \"POST\",\n    body: JSON.stringify(newUser),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addUser(response))).then(response => {\n    console.log('newUser', response);\n    alert('Thank you for your Register!\\n' + JSON.stringify(response));\n  }).catch(error => {\n    console.log('NewUser', error.message);\n    alert('Your could not register\\nError: ' + error.message);\n  });\n};\nexport const LOGIN_REQUEST_FACEBOOK = 'LOGIN_REQUEST_FACEBOOK';\nexport const LOGIN_SUCCESS_FACEBOOK = 'LOGIN_SUCCESS_FACEBOOK';\nexport const LOGIN_FAILURE_FACEBOOK = 'LOGIN_FAILURE_FACEBOOK';\nexport const requestLoginFacebook = () => {\n  return {\n    type: ActionTypes.LOGIN_REQUEST_FACEBOOK\n  };\n};\nexport const receiveLoginFacebook = response => {\n  return {\n    type: ActionTypes.LOGIN_SUCCESS_FACEBOOK,\n    token: response.token\n  };\n};\nexport const loginErrorFacebook = message => {\n  return {\n    type: ActionTypes.LOGIN_FAILURE_FACEBOOK,\n    message\n  };\n};\nexport const loginUserFacebook = () => dispatch => {\n  // We dispatch requestLogin to kickoff the call to the API\n  dispatch(requestLoginFacebook());\n  return fetch(baseUrl + 'users/facebook/token').then(response => {\n    if (response.ok) {\n      console.log('resopnse...............' + response);\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    if (response.success) {\n      // If login was successful, set the token in local storage\n      localStorage.setItem('token', response.token); // localStorage.setItem('creds', JSON.stringify(creds));\n      // Dispatch the success action\n\n      dispatch(fetchFavorites());\n      dispatch(receiveLoginFacebook(response));\n    } else {\n      var error = new Error('Error ' + response.status);\n      error.response = response;\n      throw error;\n    }\n  }).catch(error => dispatch(loginErrorFacebook(error.message)));\n};","map":{"version":3,"sources":["/Users/anabella/Desktop/ramona/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","dispatch","newComment","dish","console","log","bearer","localStorage","getItem","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","alert","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","feedbackFailed","FEEDBACK_FAILED","addFeedback","feedback","ADD_FEEDBACK","postFeedback","requestLogin","creds","LOGIN_REQUEST","receiveLogin","LOGIN_SUCCESS","token","loginError","LOGIN_FAILURE","loginUser","success","setItem","fetchFavorites","requestLogout","LOGOUT_REQUEST","receiveLogout","LOGOUT_SUCCESS","logoutUser","removeItem","favoritesFailed","postFavorite","favorites","addFavorites","deleteFavorite","favoritesLoading","FAVORITES_LOADING","FAVORITES_FAILED","ADD_FAVORITES","addUser","newUser","ADD_USER","registerUser","LOGIN_REQUEST_FACEBOOK","LOGIN_SUCCESS_FACEBOOK","LOGIN_FAILURE_FACEBOOK","requestLoginFacebook","receiveLoginFacebook","loginErrorFacebook","loginUserFacebook"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const addComment = (comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postComment = (dishId, rating, comment) => (dispatch) => {\n\n    const newComment = {\n        dish: dishId,\n        rating: rating,\n        comment: comment\n    }\n    console.log('Comment ', newComment);\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'comments', {\n        method: 'POST',\n        body: JSON.stringify(newComment),\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        }\n        else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n    },\n    error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n    })\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error => { console.log('Post comments ', error.message);\n        alert('Your comment could not be posted\\nError: '+ error.message); })\n}\n\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(dishes => dispatch(addDishes(dishes)))\n        .catch(error => dispatch(dishesFailed(error.message)));\n}\n\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\nexport const fetchComments = () => (dispatch) => {\n    return fetch(baseUrl + 'comments')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(comments => dispatch(addComments(comments)))\n        .catch(error => dispatch(commentsFailed(error.message)));\n}\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const fetchPromos = () => (dispatch) => {\n    dispatch(promosLoading(true));\n\n    return fetch(baseUrl + 'promotions')\n        .then(response => {\n            if (response.ok) {\n                return response;\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(promos => dispatch(addPromos(promos)))\n        .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\nexport const fetchLeaders = () => (dispatch) => {\n    \n    dispatch(leadersLoading());\n\n    return fetch(baseUrl + 'leaders')\n    .then(response => {\n        if (response.ok) {\n            return response;\n        } else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(leaders => dispatch(addLeaders(leaders)))\n    .catch(error => dispatch(leadersFailed(error.message)));\n}\n\nexport const leadersLoading = () => ({\n    type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n});\n\nexport const addLeaders = (leaders) => ({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n});\n\n\nexport const feedbackFailed = (errmess) => ({\n    type: ActionTypes.FEEDBACK_FAILED,\n    payload: errmess\n  });\n  \n  export const addFeedback = (feedback) => ({\n    type: ActionTypes.ADD_FEEDBACK,\n    payload: feedback\n  });\n\nexport const postFeedback = (feedback) => (dispatch) => {\n        \n    return fetch(baseUrl + 'feedbacks', {\n        method: \"POST\",\n        body: JSON.stringify(feedback),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => dispatch(addFeedback(response)))\n    .then(response => { console.log('Feedback', response); alert('Thank you for your feedback!\\n'+JSON.stringify(response)); })\n    .catch(error =>  { console.log('Feedback', error.message); alert('Your feedback could not be posted\\nError: '+error.message); });\n};\n\nexport const requestLogin = (creds) => {\n    return {\n        type: ActionTypes.LOGIN_REQUEST,\n        creds\n    }\n}\n  \nexport const receiveLogin = (response) => {\n    return {\n        type: ActionTypes.LOGIN_SUCCESS,\n        token: response.token\n    }\n}\n  \nexport const loginError = (message) => {\n    return {\n        type: ActionTypes.LOGIN_FAILURE,\n        message\n    }\n}\n\nexport const loginUser = (creds) => (dispatch) => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds))\n\n    return fetch(baseUrl + 'users/login', {\n        method: 'POST',\n        headers: { \n            'Content-Type':'application/json' \n        },\n        body: JSON.stringify(creds)\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        } else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n        },\n        error => {\n            throw error;\n        })\n    .then(response => response.json())\n    .then(response => {\n        if (response.success) {\n            // If login was successful, set the token in local storage\n            localStorage.setItem('token', response.token);\n            localStorage.setItem('creds', JSON.stringify(creds));\n            // Dispatch the success action\n            dispatch(fetchFavorites());\n            dispatch(receiveLogin(response));\n        }\n        else {\n            var error = new Error('Error ' + response.status);\n            error.response = response;\n            throw error;\n        }\n    })\n    .catch(error => dispatch(loginError(error.message)))\n};\n\nexport const requestLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_REQUEST\n    }\n}\n  \nexport const receiveLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_SUCCESS\n    }\n}\n\n// Logs the user out\nexport const logoutUser = () => (dispatch) => {\n    dispatch(requestLogout())\n    localStorage.removeItem('token');\n    localStorage.removeItem('creds');\n    dispatch(favoritesFailed(\"Error 401: Unauthorized\"));\n    dispatch(receiveLogout())\n}\n\nexport const postFavorite = (dishId) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites/' + dishId, {\n        method: \"POST\",\n        body: JSON.stringify({\"_id\": dishId}),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': bearer\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(favorites => { console.log('Favorite Added', favorites); dispatch(addFavorites(favorites)); })\n    .catch(error => dispatch(favoritesFailed(error.message)));\n}\n\nexport const deleteFavorite = (dishId) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites/' + dishId, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': bearer\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(favorites => { console.log('Favorite Deleted', favorites); dispatch(addFavorites(favorites)); })\n    .catch(error => dispatch(favoritesFailed(error.message)));\n};\n\nexport const fetchFavorites = () => (dispatch) => {\n    dispatch(favoritesLoading(true));\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'favorites', {\n        headers: {\n            'Authorization': bearer\n        },\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        }\n        else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n    },\n    error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n    })\n    .then(response => response.json())\n    .then(favorites => dispatch(addFavorites(favorites)))\n    .catch(error => dispatch(favoritesFailed(error.message)));\n}\n\nexport const favoritesLoading = () => ({\n    type: ActionTypes.FAVORITES_LOADING\n});\n\nexport const favoritesFailed = (errmess) => ({\n    type: ActionTypes.FAVORITES_FAILED,\n    payload: errmess\n});\n\nexport const addFavorites = (favorites) => ({\n    type: ActionTypes.ADD_FAVORITES,\n    payload: favorites\n});\n\nexport const addUser = (newUser) => ({\n    type: ActionTypes.ADD_USER,\n    payload: newUser\n});\n\nexport const registerUser = (newUser) => (dispatch) => {\n\n    return fetch(baseUrl + 'users/signup', {\n        method: \"POST\",\n        body: JSON.stringify(newUser),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => dispatch(addUser(response)))\n    .then(response => { console.log('newUser', response); alert('Thank you for your Register!\\n'+JSON.stringify(response)); })\n    .catch(error =>  { console.log('NewUser', error.message); alert('Your could not register\\nError: '+error.message); });\n};\n\n\nexport const LOGIN_REQUEST_FACEBOOK = 'LOGIN_REQUEST_FACEBOOK';\nexport const LOGIN_SUCCESS_FACEBOOK = 'LOGIN_SUCCESS_FACEBOOK';\nexport const LOGIN_FAILURE_FACEBOOK = 'LOGIN_FAILURE_FACEBOOK';\n\n\nexport const requestLoginFacebook = () => {\n    return {\n        type: ActionTypes.LOGIN_REQUEST_FACEBOOK\n    }\n}\n  \nexport const receiveLoginFacebook = (response) => {\n    return {\n        type: ActionTypes.LOGIN_SUCCESS_FACEBOOK,\n        token: response.token\n    }\n}\n  \nexport const loginErrorFacebook = (message) => {\n    return {\n        type: ActionTypes.LOGIN_FAILURE_FACEBOOK,\n        message\n    }\n}\n\nexport const loginUserFacebook = () => (dispatch) => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLoginFacebook())\n\n    return fetch(baseUrl + 'users/facebook/token')\n    .then(response => {\n        if (response.ok) {\n            console.log('resopnse...............'+response);\n            return response;\n        } else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n        },\n        error => {\n            throw error;\n        })\n    .then(response => response.json())\n    .then(response => {\n        if (response.success) {\n            // If login was successful, set the token in local storage\n            localStorage.setItem('token', response.token);\n           // localStorage.setItem('creds', JSON.stringify(creds));\n            // Dispatch the success action\n            dispatch(fetchFavorites());\n            dispatch(receiveLoginFacebook(response));\n        }\n        else {\n            var error = new Error('Error ' + response.status);\n            error.response = response;\n            throw error;\n        }\n    })\n    .catch(error => dispatch(loginErrorFacebook(error.message)))\n};"]},"metadata":{},"sourceType":"module"}