{"ast":null,"code":"import * as ActionTypes from './ActionTypes'; // The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\n\nexport const Auth = (state = {\n  isLoading: false,\n  isAuthenticated: localStorage.getItem('token') ? true : false,\n  token: localStorage.getItem('token'),\n  user: localStorage.getItem('creds') ? JSON.parse(localStorage.getItem('creds')) : null,\n  errMess: null\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.LOGIN_REQUEST:\n      return { ...state,\n        isLoading: true,\n        isAuthenticated: false,\n        user: action.creds\n      };\n\n    case ActionTypes.LOGIN_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: true,\n        errMess: '',\n        token: action.token\n      };\n\n    case ActionTypes.LOGIN_FAILURE:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: false,\n        errMess: action.message\n      };\n\n    case ActionTypes.LOGOUT_REQUEST:\n      return { ...state,\n        isLoading: true,\n        isAuthenticated: true\n      };\n\n    case ActionTypes.LOGOUT_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: false,\n        token: '',\n        user: null\n      };\n\n    case ActionTypes.LOGIN_REQUEST_FACEBOOK:\n      return { ...state,\n        isLoading: true,\n        isAuthenticated: false,\n        user: action.creds\n      };\n\n    case ActionTypes.LOGIN_SUCCESS_FACEBOOK:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: true,\n        errMess: ''\n      };\n\n    case ActionTypes.LOGIN_FAILURE_FACEBOOK:\n      return { ...state,\n        isLoading: false,\n        isAuthenticated: false,\n        errMess: action.message\n      };\n\n    default:\n      return state;\n  }\n};\n_c = Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/anabella/Desktop/ramona/src/redux/auth.js"],"names":["ActionTypes","Auth","state","isLoading","isAuthenticated","localStorage","getItem","token","user","JSON","parse","errMess","action","type","LOGIN_REQUEST","creds","LOGIN_SUCCESS","LOGIN_FAILURE","message","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGIN_REQUEST_FACEBOOK","LOGIN_SUCCESS_FACEBOOK","LOGIN_FAILURE_FACEBOOK"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG;AACrBC,EAAAA,SAAS,EAAE,KADU;AAErBC,EAAAA,eAAe,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgC,IAAhC,GAAuC,KAFnC;AAGrBC,EAAAA,KAAK,EAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHc;AAIrBE,EAAAA,IAAI,EAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhC,GAA4E,IAJ7D;AAKrBK,EAAAA,OAAO,EAAE;AALY,CAAT,EAMbC,MANa,KAMF;AACd,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,WAAW,CAACc,aAAjB;AACI,aAAO,EAAC,GAAGZ,KAAJ;AACHC,QAAAA,SAAS,EAAE,IADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHI,QAAAA,IAAI,EAAEI,MAAM,CAACG;AAHV,OAAP;;AAKJ,SAAKf,WAAW,CAACgB,aAAjB;AACI,aAAO,EAAC,GAAGd,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,IAFd;AAGHO,QAAAA,OAAO,EAAE,EAHN;AAIHJ,QAAAA,KAAK,EAAEK,MAAM,CAACL;AAJX,OAAP;;AAOJ,SAAKP,WAAW,CAACiB,aAAjB;AACI,aAAO,EAAC,GAAGf,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHO,QAAAA,OAAO,EAAEC,MAAM,CAACM;AAHb,OAAP;;AAKJ,SAAKlB,WAAW,CAACmB,cAAjB;AACI,aAAO,EAAC,GAAGjB,KAAJ;AACHC,QAAAA,SAAS,EAAE,IADR;AAEHC,QAAAA,eAAe,EAAE;AAFd,OAAP;;AAIJ,SAAKJ,WAAW,CAACoB,cAAjB;AACI,aAAO,EAAC,GAAGlB,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHG,QAAAA,KAAK,EAAE,EAHJ;AAIHC,QAAAA,IAAI,EAAE;AAJH,OAAP;;AAMJ,SAAKR,WAAW,CAACqB,sBAAjB;AACI,aAAO,EAAC,GAAGnB,KAAJ;AACHC,QAAAA,SAAS,EAAE,IADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHI,QAAAA,IAAI,EAAEI,MAAM,CAACG;AAHV,OAAP;;AAKJ,SAAKf,WAAW,CAACsB,sBAAjB;AACI,aAAO,EAAC,GAAGpB,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,IAFd;AAGHO,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAOJ,SAAKX,WAAW,CAACuB,sBAAjB;AACI,aAAO,EAAC,GAAGrB,KAAJ;AACHC,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,eAAe,EAAE,KAFd;AAGHO,QAAAA,OAAO,EAAEC,MAAM,CAACM;AAHb,OAAP;;AAMJ;AACI,aAAOhB,KAAP;AAvDR;AAyDH,CAhEM;KAAMD,I","sourcesContent":["import * as ActionTypes from './ActionTypes';\n\n// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nexport const Auth = (state = {\n        isLoading: false,\n        isAuthenticated: localStorage.getItem('token') ? true : false,\n        token: localStorage.getItem('token'),\n        user: localStorage.getItem('creds') ? JSON.parse(localStorage.getItem('creds')) : null,\n        errMess: null\n    }, action) => {\n    switch (action.type) {\n        case ActionTypes.LOGIN_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: false,\n                user: action.creds\n            };\n        case ActionTypes.LOGIN_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: true,\n                errMess: '',\n                token: action.token,\n                 \n            };\n        case ActionTypes.LOGIN_FAILURE:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                errMess: action.message\n            };\n        case ActionTypes.LOGOUT_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: true\n            };\n        case ActionTypes.LOGOUT_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                token: '',\n                user: null\n            };\n        case ActionTypes.LOGIN_REQUEST_FACEBOOK:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: false,\n                user: action.creds\n            };\n        case ActionTypes.LOGIN_SUCCESS_FACEBOOK:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: true,\n                errMess: '',\n               \n                    \n            };\n        case ActionTypes.LOGIN_FAILURE_FACEBOOK:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                errMess: action.message\n            };\n        \n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}