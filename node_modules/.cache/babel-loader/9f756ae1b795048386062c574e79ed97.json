{"ast":null,"code":"import _objectSpread from\"/Users/anabella/Desktop/ramona/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import*as ActionTypes from'./ActionTypes';// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nexport var Auth=function Auth(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{isLoading:false,isAuthenticated:localStorage.getItem('token')?true:false,token:localStorage.getItem('token'),user:localStorage.getItem('creds')?JSON.parse(localStorage.getItem('creds')):null,errMess:null};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ActionTypes.LOGIN_REQUEST:return _objectSpread(_objectSpread({},state),{},{isLoading:true,isAuthenticated:false,user:action.creds});case ActionTypes.LOGIN_SUCCESS:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:true,errMess:'',token:action.token});case ActionTypes.LOGIN_FAILURE:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:false,errMess:action.message});case ActionTypes.LOGOUT_REQUEST:return _objectSpread(_objectSpread({},state),{},{isLoading:true,isAuthenticated:true});case ActionTypes.LOGOUT_SUCCESS:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:false,token:'',user:null});case ActionTypes.LOGIN_REQUEST_FACEBOOK:return _objectSpread(_objectSpread({},state),{},{isLoading:true,isAuthenticated:false,user:action.creds});case ActionTypes.LOGIN_SUCCESS_FACEBOOK:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:true,errMess:''});case ActionTypes.LOGIN_FAILURE_FACEBOOK:return _objectSpread(_objectSpread({},state),{},{isLoading:false,isAuthenticated:false,errMess:action.message});default:return state;}};","map":{"version":3,"sources":["/Users/anabella/Desktop/ramona/src/redux/auth.js"],"names":["ActionTypes","Auth","state","isLoading","isAuthenticated","localStorage","getItem","token","user","JSON","parse","errMess","action","type","LOGIN_REQUEST","creds","LOGIN_SUCCESS","LOGIN_FAILURE","message","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGIN_REQUEST_FACEBOOK","LOGIN_SUCCESS_FACEBOOK","LOGIN_FAILURE_FACEBOOK"],"mappings":"oJAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CAEA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAMF,IANGC,CAAAA,KAMH,2DANW,CACrBC,SAAS,CAAE,KADU,CAErBC,eAAe,CAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAAgC,IAAhC,CAAuC,KAFnC,CAGrBC,KAAK,CAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHc,CAIrBE,IAAI,CAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,EAAgCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhC,CAA4E,IAJ7D,CAKrBK,OAAO,CAAE,IALY,CAMX,IAAXC,CAAAA,MAAW,2CACd,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKb,CAAAA,WAAW,CAACc,aAAjB,CACI,sCAAWZ,KAAX,MACIC,SAAS,CAAE,IADf,CAEIC,eAAe,CAAE,KAFrB,CAGII,IAAI,CAAEI,MAAM,CAACG,KAHjB,GAKJ,IAAKf,CAAAA,WAAW,CAACgB,aAAjB,CACI,sCAAWd,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,IAFrB,CAGIO,OAAO,CAAE,EAHb,CAIIJ,KAAK,CAAEK,MAAM,CAACL,KAJlB,GAOJ,IAAKP,CAAAA,WAAW,CAACiB,aAAjB,CACI,sCAAWf,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,KAFrB,CAGIO,OAAO,CAAEC,MAAM,CAACM,OAHpB,GAKJ,IAAKlB,CAAAA,WAAW,CAACmB,cAAjB,CACI,sCAAWjB,KAAX,MACIC,SAAS,CAAE,IADf,CAEIC,eAAe,CAAE,IAFrB,GAIJ,IAAKJ,CAAAA,WAAW,CAACoB,cAAjB,CACI,sCAAWlB,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,KAFrB,CAGIG,KAAK,CAAE,EAHX,CAIIC,IAAI,CAAE,IAJV,GAMJ,IAAKR,CAAAA,WAAW,CAACqB,sBAAjB,CACI,sCAAWnB,KAAX,MACIC,SAAS,CAAE,IADf,CAEIC,eAAe,CAAE,KAFrB,CAGII,IAAI,CAAEI,MAAM,CAACG,KAHjB,GAKJ,IAAKf,CAAAA,WAAW,CAACsB,sBAAjB,CACI,sCAAWpB,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,IAFrB,CAGIO,OAAO,CAAE,EAHb,GAOJ,IAAKX,CAAAA,WAAW,CAACuB,sBAAjB,CACI,sCAAWrB,KAAX,MACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,KAFrB,CAGIO,OAAO,CAAEC,MAAM,CAACM,OAHpB,GAMJ,QACI,MAAOhB,CAAAA,KAAP,CAvDR,CAyDH,CAhEM","sourcesContent":["import * as ActionTypes from './ActionTypes';\n\n// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nexport const Auth = (state = {\n        isLoading: false,\n        isAuthenticated: localStorage.getItem('token') ? true : false,\n        token: localStorage.getItem('token'),\n        user: localStorage.getItem('creds') ? JSON.parse(localStorage.getItem('creds')) : null,\n        errMess: null\n    }, action) => {\n    switch (action.type) {\n        case ActionTypes.LOGIN_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: false,\n                user: action.creds\n            };\n        case ActionTypes.LOGIN_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: true,\n                errMess: '',\n                token: action.token,\n                 \n            };\n        case ActionTypes.LOGIN_FAILURE:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                errMess: action.message\n            };\n        case ActionTypes.LOGOUT_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: true\n            };\n        case ActionTypes.LOGOUT_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                token: '',\n                user: null\n            };\n        case ActionTypes.LOGIN_REQUEST_FACEBOOK:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: false,\n                user: action.creds\n            };\n        case ActionTypes.LOGIN_SUCCESS_FACEBOOK:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: true,\n                errMess: '',\n               \n                    \n            };\n        case ActionTypes.LOGIN_FAILURE_FACEBOOK:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                errMess: action.message\n            };\n        \n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}