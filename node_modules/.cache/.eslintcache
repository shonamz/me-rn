[{"/Users/anabella/Desktop/ramona/src/index.js":"1","/Users/anabella/Desktop/ramona/src/reportWebVitals.js":"2","/Users/anabella/Desktop/ramona/src/App.js":"3","/Users/anabella/Desktop/ramona/src/components/MainComponent.js":"4","/Users/anabella/Desktop/ramona/src/redux/configureStore.js":"5","/Users/anabella/Desktop/ramona/src/components/HeaderComponent.js":"6","/Users/anabella/Desktop/ramona/src/components/FooterComponent.js":"7","/Users/anabella/Desktop/ramona/src/components/HomeComponent.js":"8","/Users/anabella/Desktop/ramona/src/components/MenuComponent.js":"9","/Users/anabella/Desktop/ramona/src/components/ContactComponent.js":"10","/Users/anabella/Desktop/ramona/src/components/DishDetailComponent.js":"11","/Users/anabella/Desktop/ramona/src/components/AboutComponent.js":"12","/Users/anabella/Desktop/ramona/src/components/FavoriteComponent.js":"13","/Users/anabella/Desktop/ramona/src/redux/ActionCreators.js":"14","/Users/anabella/Desktop/ramona/src/redux/comments.js":"15","/Users/anabella/Desktop/ramona/src/redux/promotions.js":"16","/Users/anabella/Desktop/ramona/src/redux/favorites.js":"17","/Users/anabella/Desktop/ramona/src/redux/leaders.js":"18","/Users/anabella/Desktop/ramona/src/redux/forms.js":"19","/Users/anabella/Desktop/ramona/src/redux/auth.js":"20","/Users/anabella/Desktop/ramona/src/redux/dishes.js":"21","/Users/anabella/Desktop/ramona/src/components/LoadingComponent.js":"22","/Users/anabella/Desktop/ramona/src/redux/ActionTypes.js":"23","/Users/anabella/Desktop/ramona/src/shared/baseUrl.js":"24"},{"size":641,"mtime":1656526750000,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1656526750000,"results":"27","hashOfConfig":"26"},{"size":548,"mtime":1656526750000,"results":"28","hashOfConfig":"26"},{"size":5816,"mtime":1656526750000,"results":"29","hashOfConfig":"26"},{"size":888,"mtime":1656526750000,"results":"30","hashOfConfig":"26"},{"size":11342,"mtime":1656526750000,"results":"31","hashOfConfig":"26"},{"size":2553,"mtime":1656526750000,"results":"32","hashOfConfig":"26"},{"size":2040,"mtime":1656526750000,"results":"33","hashOfConfig":"26"},{"size":2325,"mtime":1656526750000,"results":"34","hashOfConfig":"26"},{"size":11059,"mtime":1656526750000,"results":"35","hashOfConfig":"26"},{"size":6641,"mtime":1656526750000,"results":"36","hashOfConfig":"26"},{"size":10374,"mtime":1656526750000,"results":"37","hashOfConfig":"26"},{"size":2586,"mtime":1656526750000,"results":"38","hashOfConfig":"26"},{"size":14342,"mtime":1656526750000,"results":"39","hashOfConfig":"26"},{"size":576,"mtime":1656526750000,"results":"40","hashOfConfig":"26"},{"size":524,"mtime":1656526750000,"results":"41","hashOfConfig":"26"},{"size":652,"mtime":1656526750000,"results":"42","hashOfConfig":"26"},{"size":502,"mtime":1656526750000,"results":"43","hashOfConfig":"26"},{"size":162,"mtime":1656526750000,"results":"44","hashOfConfig":"26"},{"size":2274,"mtime":1656526750000,"results":"45","hashOfConfig":"26"},{"size":1242,"mtime":1656526750000,"results":"46","hashOfConfig":"26"},{"size":247,"mtime":1656526750000,"results":"47","hashOfConfig":"26"},{"size":1312,"mtime":1656526750000,"results":"48","hashOfConfig":"26"},{"size":101,"mtime":1656526750000,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e9f7e3",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anabella/Desktop/ramona/src/index.js",[],"/Users/anabella/Desktop/ramona/src/reportWebVitals.js",[],"/Users/anabella/Desktop/ramona/src/App.js",[],"/Users/anabella/Desktop/ramona/src/components/MainComponent.js",[],"/Users/anabella/Desktop/ramona/src/redux/configureStore.js",[],"/Users/anabella/Desktop/ramona/src/components/HeaderComponent.js",["101"],"import React, { Component , useState } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\n    Button, Modal, ModalHeader, ModalBody,\n    Form, FormGroup, Input, Label } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport FacebookLogin from \"react-facebook-login\";\n\n \nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isNavOpen: false,\n            isModalOpen: false,\n            isModal2Open:false,\n            isLoggedIn: false,\n            name: \"\"\n              \n        };\n        this.toggleNav = this.toggleNav.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.toggleModal2 = this.toggleModal2.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleFacebook = this.handleFacebook.bind(this);\n        this.handleLogout = this.handleLogout.bind(this);\n        this.handleRegister = this.handleRegister.bind(this);\n        this.responseFacebook = this.responseFacebook.bind(this);\n\n    }\n    \n    toggleNav() {\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    toggleModal() {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n    toggleModal2() {\n        this.setState({\n            isModal2Open: !this.state.isModal2Open\n        });\n    }\n    \n    responseFacebook(response) {\n        console.log(response);\n        this.user = response.name;\n        console.log(this.user);\n        console.log(response.accessToken);\n      };\n\n    handleLogin(event) {\n        this.toggleModal();\n        this.props.loginUser({username: this.username.value, password: this.password.value});\n        event.preventDefault();\n\n    }\n\n    handleFacebook(response){\n       // console.log(response);\n        this.toggleModal();\n        this.props.loginUserFacebook({username:response.name});\n     } \n\n    handleRegister(event) {\n        this.toggleModal2();\n        this.props.registerUser({username: this.username.value, password: this.password.value,firstname:this.firstname.value,lastname:this.lastname.value});\n        console.log({username: this.username.value, password: this.password.value,firstname:this.firstname.value,lastname:this.lastname.value});\n        event.preventDefault();\n\n    }\n\n    handleLogout() {\n        this.props.logoutUser();\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <Navbar dark expand=\"md\">\n                    <div className=\"container\">\n                        <NavbarToggler onClick={this.toggleNav} />\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\n                            <img src=\"assets/images/logo.png\" height=\"30\" width=\"41\"\n                                alt=\"Ristorante Con Fusion\" />\n                        </NavbarBrand>\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav navbar>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/home\">\n                                        <span className=\"fa fa-home fa-lg\"></span> Home\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/aboutus\">\n                                        <span className=\"fa fa-info fa-lg\"></span> About Us\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/menu\">\n                                        <span className=\"fa fa-list fa-lg\"></span> Menu\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/favorites\">\n                                        <span className=\"fa fa-heart fa-lg\"></span> My Favorites\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/contactus\">\n                                        <span className=\"fa fa-address-card fa-lg\"></span> Contact Us\n                                    </NavLink>\n                                </NavItem>\n                            </Nav>\n                            <Nav className=\"ml-auto \" navbar>\n                                <NavItem>\n                                    { !this.props.auth.isAuthenticated ?\n                                        <Button outline onClick={this.toggleModal}>\n                                            <span className=\"fa fa-sign-in fa-lg\"></span> Login\n                                            {this.props.auth.isFetching ?\n                                                <span className=\"fa fa-spinner fa-pulse fa-fw\"></span>\n                                                : null\n                                            }\n                                        </Button>\n                                        :\n                                        <div className=\"up\">\n                                        <div className=\"navbar-text mr-3\">{this.props.auth.user.username}</div>\n                                        <Button outline onClick={this.handleLogout}>\n                                            <span className=\"fa fa-sign-out fa-lg\"></span> Logout\n                                            {this.props.auth.isFetching ?\n                                                <span className=\"fa fa-spinner fa-pulse fa-fw\"></span>\n                                                : null\n                                            }\n                                        </Button>\n                                        </div>\n                                    }\n                                </NavItem>\n\n                                <NavItem>\n                                        <Button outline onClick={this.toggleModal2}>\n                                            <span className=\"fa fa-sign-in fa-lg\"></span> Register\n                                                <span className=\"fa fa-pulse fa-fw\"></span>\n                                        </Button>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </div>\n                </Navbar>\n                <Jumbotron>\n                    <div className=\"container\">\n                        <div className=\"row row-header\">\n                            <div className=\"col-12 col-sm-6\">\n                                <h1>Ramona Kitchen</h1>\n                                <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\n                            </div>\n                        </div>\n                    </div>\n                </Jumbotron>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.handleLogin}>\n                            <FormGroup>\n                                <Label htmlFor=\"username\">Username</Label>\n                                <Input type=\"text\" id=\"username\" name=\"username\"\n                                    innerRef={(input) => this.username = input} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"password\">Password</Label>\n                                <Input type=\"password\" id=\"password\" name=\"password\"\n                                    innerRef={(input) => this.password = input}  />\n                            </FormGroup>\n                            <FormGroup check>\n                                <Label check>\n                                    <Input type=\"checkbox\" name=\"remember\"\n                                    innerRef={(input) => this.remember = input}  />\n                                    Remember Me\n                                </Label>\n                            </FormGroup>\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\n                            <br />\n                            <br />\n                            <FormGroup >\n                            <FacebookLogin  \n                            appId=\"435672821683794\"\n                            autoLoad={false}\n                            fields=\"name\"\n                            onClick={this.handleFacebook}\n                            callback={this.responseFacebook}\n                            /> \n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n                <Modal isOpen={this.state.isModal2Open} toggle={this.toggleModal2}> \n                     <ModalHeader toggle={this.toggleModal2}>Register</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.handleRegister}>\n                            <FormGroup>\n                                <Label htmlFor=\"username\">Username</Label>\n                                <Input type=\"text\" id=\"username\" name=\"username\"\n                                    innerRef={(input) => this.username = input} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"password\">Password</Label>\n                                <Input type=\"password\" id=\"password\" name=\"password\"\n                                    innerRef={(input) => this.password = input}  />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"firstname\">First Name</Label>\n                                <Input type=\"text\" id=\"firstname\" name=\"firstname\"\n                                    innerRef={(input) => this.firstname = input} />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label htmlFor=\"lastname\">Last Name</Label>\n                                <Input type=\"text\" id=\"lastname\" name=\"lastname\"\n                                    innerRef={(input) => this.lastname = input} />\n                            </FormGroup>\n                            <FormGroup check>\n                                <Label check>\n                                <Input type=\"checkbox\" name=\"remember\"\n                                innerRef={(input) => this.remember = input}  />\n                                Remember me\n                                </Label>\n                            </FormGroup>\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Register</Button>\n                        </Form>\n                    </ModalBody> \n                 </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;","/Users/anabella/Desktop/ramona/src/components/FooterComponent.js",[],"/Users/anabella/Desktop/ramona/src/components/HomeComponent.js",[],"/Users/anabella/Desktop/ramona/src/components/MenuComponent.js",[],"/Users/anabella/Desktop/ramona/src/components/ContactComponent.js",["102","103","104","105","106","107","108","109"]," import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Breadcrumb, BreadcrumbItem,\n    Button, Row, Col, Label } from 'reactstrap'; \nimport { Control,  Errors , Form} from 'react-redux-form';\n// import {  Form } from 'react-redux-form';\n\n\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => val && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass Contact extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            firstname: '',\n            lastname: '',\n            telnum: '',\n            email: '',\n            agree: false,\n            contactType: 'Tel.',\n            message: '',\n            touched: {\n                firstname: false,\n                lastname: false,\n                telnum: false,\n                email: false\n            }\n        };\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n          \n    }\n\n    handleSubmit(values) {\n        console.log('Current State is: ' + JSON.stringify(values));\n       // alert('Current State is: ' + JSON.stringify(values));\n        this.props.resetFeedbackForm();\n        // event.preventDefault();\n        this.props.postFeedback(values);\n\n    }\n    render(){\n     return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <Breadcrumb>\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                    <BreadcrumbItem active>Contact Us</BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"col-12\">\n                    <h3>Contact Us</h3>\n                    <hr />\n                </div>                \n            </div>\n            \n            <div className=\"row row-content\">\n                <div className=\"col-12\">\n                <h3>Location Information</h3>\n                </div>\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\n                        <h5>Our Address</h5>\n                        <address>\n                        11345 Beverly Blv, Beverly Hills<br />\n                        California,USA<br />\n                        <i className=\"fa fa-phone\"></i>: +310 234 5678<br />\n                        <i className=\"fa fa-fax\"></i>: +310 765 4321<br />\n                        <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:ramona@food.net\">ramona@food.net</a>\n                        </address>\n                </div>\n                {/* <div className=\"col-12 col-sm-6 offset-sm-1\">\n                    <h5>Map of our Location</h5>\n                </div> */}\n                <div className=\"col-12 col-sm-11 offset-sm-1\">\n                    <div className=\"btn-group\" role=\"group\">\n                        <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+3102345678\"><i className=\"fa fa-phone\"></i> Call</a>\n                        <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\n                        <a role=\"button\" className=\"btn btn-success\" href=\"mailto:ramona@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row row-content\">\n                   <div className=\"col-12\">\n                      <h3>Send us your Feedback</h3>\n                   </div>\n                    <div className=\"col-12 col-md-9\">\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\n                                <Row className=\"form-group\">\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".firstname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".lastname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\n                                        placeholder=\"Tel. Number\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".telnum\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, validEmail\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid Email Address'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 6, offset: 2}}>\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\n                                                className=\"form-check-input\"\n                                                 /> {' '}\n                                                <strong>May we contact you?</strong>\n                                        </Label>\n                                    </div>\n                                </Col>\n                                <Col md={{size: 3, offset: 1}}>\n                                    <Control.select model=\".contactType\" name=\"contactType\"\n                                        className=\"form-control\">\n                                        <option>Tel.</option>\n                                        <option>Email</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\n                                        rows=\"12\"\n                                        className=\"form-control\" />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size:10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                    Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </div>\n               </div>\n        </div>\n    );\n}\n}\n\nexport default Contact;","/Users/anabella/Desktop/ramona/src/components/DishDetailComponent.js",["110","111"]," \nimport React, { Component } from 'react';\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody,\n    CardTitle, Breadcrumb, BreadcrumbItem, Label,\n    Modal, ModalHeader, ModalBody, Button, Row, Col } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm} from 'react-redux-form';\nimport { Loading } from './LoadingComponent';\nimport { baseUrl } from '../shared/baseUrl';\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\n\n\n    function RenderDish({dish, favorite, postFavorite}) {\n            return(\n                <div className=\"col-12 col-md-5 m-1\">\n                    <FadeTransform in \n                        transformProps={{\n                            exitTransform: 'scale(0.5) translateY(-50%)'\n                        }}>\n                        <Card>\n                            <CardImg top src={baseUrl + dish.image} alt={dish.name} />\n                            <CardImgOverlay>\n                                <Button outline color=\"primary\" onClick={() => favorite ? console.log('Already favorite') : postFavorite(dish._id)}>\n                                    {favorite ?\n                                        <span className=\"fa fa-heart\"></span>\n                                        : \n                                        <span className=\"fa fa-heart-o\"></span>\n                                    }\n                                </Button>\n                            </CardImgOverlay>\n                            <CardBody>\n                                <CardTitle>{dish.name}</CardTitle>\n                                <CardText>{dish.description}</CardText>\n                            </CardBody>\n                        </Card>\n                    </FadeTransform>\n                </div>\n            );\n\n    }  \n\n   function RenderComments({comments, postComment, dishId}) {\n    if (comments!= null)\n        return(\n            <div className=\"col-12 col-md-5 m-1\">\n                <h4>Comments</h4>\n                <ul className=\"list-unstyled\">\n                    <Stagger in>\n                        {comments.map((comment) => {\n                            return (\n                                <Fade in key={comment._id}>\n                                    <li>\n                                    <p>{comment.comment}</p>\n                                    <p>{comment.rating} stars</p>\n                                    <p>-- {comment.author.firstname} {comment.author.lastname} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day:'2-digit'}).format(new Date(Date.parse(comment.updatedAt)))}</p>\n                                    </li>\n                                </Fade>\n                            );\n                        })}\n                    </Stagger>\n                </ul>\n                <CommentForm dishId={dishId} postComment={postComment} />\n            </div>\n        );\n    else\n        return(\n            <div></div>\n        );\n}\nclass CommentForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        \n        this.state = {\n          isNavOpen: false,\n          isModalOpen: false\n        };\n    }\n\n    toggleModal() {\n        this.setState({\n          isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleSubmit(values) {\n        this.toggleModal();\n        this.props.postComment(this.props.dishId, values.rating, values.comment);\n    }\n\n    render() {\n        return(\n        <div>\n            <Button outline onClick={this.toggleModal}><span className=\"fa fa-pencil fa-lg\"></span> Submit Comment</Button>\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n            <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\n            <ModalBody>\n                <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                    <Row className=\"form-group\">\n                        <Col>\n                        <Label htmlFor=\"rating\">Rating</Label>\n                        <Control.select model=\".rating\" id=\"rating\" className=\"form-control\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                        </Control.select>\n                        </Col>\n                    </Row>\n                    <Row className=\"form-group\">\n                        <Col>\n                        <Label htmlFor=\"comment\">Comment</Label>\n                        <Control.textarea model=\".comment\" id=\"comment\"\n                                    rows=\"6\" className=\"form-control\" />\n                        </Col>\n                    </Row>\n                    <Button type=\"submit\" className=\"bg-primary\">\n                        Submit\n                    </Button>\n                </LocalForm>\n            </ModalBody>\n           </Modal>\n        </div>\n        );\n    }\n\n}\n\nconst DishDetail = (props) => {\n    if (props.isLoading) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n    else if (props.errMess) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h4>{props.errMess}</h4>\n                </div>\n            </div>\n        );\n    }\n    else if (props.dish != null)        \n        return (\n             <div className=\"container\">\n                <div className=\"row\">\n                    <Breadcrumb>\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3>{props.dish.name}</h3>\n                         <hr />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <RenderDish dish={props.dish} favorite={props.favorite} postFavorite={props.postFavorite} />\n                    <RenderComments comments={props.comments}\n                        postComment={props.postComment}\n                        dishId={props.dish._id} />\n                </div>\n            </div>\n        );\n    else\n        return(\n            <div></div>\n        );\n}\n   \nexport default DishDetail;\n\n ","/Users/anabella/Desktop/ramona/src/components/AboutComponent.js",[],"/Users/anabella/Desktop/ramona/src/components/FavoriteComponent.js",[],"/Users/anabella/Desktop/ramona/src/redux/ActionCreators.js",[],"/Users/anabella/Desktop/ramona/src/redux/comments.js",[],"/Users/anabella/Desktop/ramona/src/redux/promotions.js",[],"/Users/anabella/Desktop/ramona/src/redux/favorites.js",[],"/Users/anabella/Desktop/ramona/src/redux/leaders.js",[],"/Users/anabella/Desktop/ramona/src/redux/forms.js",[],"/Users/anabella/Desktop/ramona/src/redux/auth.js",[],"/Users/anabella/Desktop/ramona/src/redux/dishes.js",[],"/Users/anabella/Desktop/ramona/src/components/LoadingComponent.js",[],"/Users/anabella/Desktop/ramona/src/redux/ActionTypes.js",[],"/Users/anabella/Desktop/ramona/src/shared/baseUrl.js",[],{"ruleId":"112","severity":1,"message":"113","line":1,"column":29,"nodeType":"114","messageId":"115","endLine":1,"endColumn":37},{"ruleId":"116","severity":1,"message":"117","line":83,"column":25,"nodeType":"118","endLine":83,"endColumn":67},{"ruleId":"119","severity":1,"message":"120","line":97,"column":37,"nodeType":"118","endLine":103,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":119,"column":37,"nodeType":"118","endLine":125,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":141,"column":37,"nodeType":"118","endLine":147,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":164,"column":37,"nodeType":"118","endLine":170,"endColumn":44},{"ruleId":"119","severity":1,"message":"121","line":186,"column":45,"nodeType":"118","endLine":188,"endColumn":52},{"ruleId":"119","severity":1,"message":"122","line":194,"column":37,"nodeType":"118","endLine":195,"endColumn":66},{"ruleId":"119","severity":1,"message":"123","line":204,"column":37,"nodeType":"118","endLine":206,"endColumn":68},{"ruleId":"119","severity":1,"message":"122","line":106,"column":25,"nodeType":"118","endLine":106,"endColumn":94},{"ruleId":"119","severity":1,"message":"123","line":118,"column":25,"nodeType":"118","endLine":119,"endColumn":73},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE"]